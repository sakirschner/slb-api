image:
  name: hashicorp/terraform:0.12.21
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  ECR_REPO: "964127226690.dkr.ecr.us-east-1.amazonaws.com/student-leader-board-api-devops"
  AWS_ACCESS_KEY_ID: "AKIA6A6TV7NBIENPHN3E"
  AWS_SECRET_ACCESS_KEY: "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"

stages:
  - Test
  - Build and Push
  - Dev Plan
  - Dev Apply
  - Production Plan
  - Production Apply
  - Destroy

Test:
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  stage: Test
  script:
    - echo $ECR_REPO
    - echo $CI_COMMIT_SHORT_SHA  
    - apk add python3-dev libffi-dev openssl-dev gcc libc-dev make
    - pip3 install docker-compose
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~/^(dev|production)$/ || $CI_COMMIT_BRANCH =~ /^(dev|production)$/'

Validate Terraform:
  stage: Test
  script:
    - cd deploy/
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~/^(dev|production)$/ || $CI_COMMIT_BRANCH =~ /^(dev|production)$/'

Build and Push:
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  stage: Build and Push
  script:
    - apk add python3
    - pip3 install awscli
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA .
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPO:$CI_COMMIT_SHORT_SHA $ECR_REPO:latest
    - docker push $ECR_REPO:latest
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(dev|production)$/'

Dev Plan:
  stage: Dev Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select dev || terraform workspace new dev
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH =~/^(dev|production)$/

Dev Apply:
  stage: Dev Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select dev
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~/^(dev|production)$/

Production Plan:
  stage: Production Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production || terraform workspace new production
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Dev Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select dev
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(dev|production)$/'
      when: manual

Production Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select production
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual  